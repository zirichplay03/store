// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: generated/store.proto
#ifndef GRPC_generated_2fstore_2eproto__INCLUDED
#define GRPC_generated_2fstore_2eproto__INCLUDED

#include "store.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace store {

// Интерфейс сервиса для аутентификации, регистрации и работы с товарами
class StoreService final {
 public:
  static constexpr char const* service_full_name() {
    return "store.StoreService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::store::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AuthResponse>> AsyncAuthenticate(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AuthResponse>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AuthResponse>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AuthResponse>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::store::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::RegisterResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::RegisterResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::RegisterResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::RegisterResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProduct(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::store::ProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::ProductResponse>> AsyncGetProduct(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::ProductResponse>>(AsyncGetProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::ProductResponse>> PrepareAsyncGetProduct(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::ProductResponse>>(PrepareAsyncGetProductRaw(context, request, cq));
    }
    virtual ::grpc::Status AddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::store::AddToCartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AddToCartResponse>> AsyncAddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AddToCartResponse>>(AsyncAddToCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AddToCartResponse>> PrepareAsyncAddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::AddToCartResponse>>(PrepareAsyncAddToCartRaw(context, request, cq));
    }
    virtual ::grpc::Status Checkout(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::store::CheckoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::CheckoutResponse>> AsyncCheckout(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::CheckoutResponse>>(AsyncCheckoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::CheckoutResponse>> PrepareAsyncCheckout(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::store::CheckoutResponse>>(PrepareAsyncCheckoutRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Authenticate(::grpc::ClientContext* context, const ::store::AuthRequest* request, ::store::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Authenticate(::grpc::ClientContext* context, const ::store::AuthRequest* request, ::store::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest* request, ::store::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest* request, ::store::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetProduct(::grpc::ClientContext* context, const ::store::ProductRequest* request, ::store::ProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProduct(::grpc::ClientContext* context, const ::store::ProductRequest* request, ::store::ProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest* request, ::store::AddToCartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest* request, ::store::AddToCartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Checkout(::grpc::ClientContext* context, const ::store::CheckoutRequest* request, ::store::CheckoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Checkout(::grpc::ClientContext* context, const ::store::CheckoutRequest* request, ::store::CheckoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::AuthResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::AuthResponse>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::RegisterResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::RegisterResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::ProductResponse>* AsyncGetProductRaw(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::ProductResponse>* PrepareAsyncGetProductRaw(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::AddToCartResponse>* AsyncAddToCartRaw(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::AddToCartResponse>* PrepareAsyncAddToCartRaw(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::CheckoutResponse>* AsyncCheckoutRaw(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::store::CheckoutResponse>* PrepareAsyncCheckoutRaw(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::store::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AuthResponse>> AsyncAuthenticate(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AuthResponse>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AuthResponse>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AuthResponse>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::store::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::RegisterResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::RegisterResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::RegisterResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::RegisterResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    ::grpc::Status GetProduct(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::store::ProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::ProductResponse>> AsyncGetProduct(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::ProductResponse>>(AsyncGetProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::ProductResponse>> PrepareAsyncGetProduct(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::ProductResponse>>(PrepareAsyncGetProductRaw(context, request, cq));
    }
    ::grpc::Status AddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::store::AddToCartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AddToCartResponse>> AsyncAddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AddToCartResponse>>(AsyncAddToCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AddToCartResponse>> PrepareAsyncAddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::AddToCartResponse>>(PrepareAsyncAddToCartRaw(context, request, cq));
    }
    ::grpc::Status Checkout(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::store::CheckoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::CheckoutResponse>> AsyncCheckout(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::CheckoutResponse>>(AsyncCheckoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::CheckoutResponse>> PrepareAsyncCheckout(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::store::CheckoutResponse>>(PrepareAsyncCheckoutRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Authenticate(::grpc::ClientContext* context, const ::store::AuthRequest* request, ::store::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      void Authenticate(::grpc::ClientContext* context, const ::store::AuthRequest* request, ::store::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest* request, ::store::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterUser(::grpc::ClientContext* context, const ::store::RegisterRequest* request, ::store::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProduct(::grpc::ClientContext* context, const ::store::ProductRequest* request, ::store::ProductResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProduct(::grpc::ClientContext* context, const ::store::ProductRequest* request, ::store::ProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest* request, ::store::AddToCartResponse* response, std::function<void(::grpc::Status)>) override;
      void AddToCart(::grpc::ClientContext* context, const ::store::AddToCartRequest* request, ::store::AddToCartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Checkout(::grpc::ClientContext* context, const ::store::CheckoutRequest* request, ::store::CheckoutResponse* response, std::function<void(::grpc::Status)>) override;
      void Checkout(::grpc::ClientContext* context, const ::store::CheckoutRequest* request, ::store::CheckoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::store::AuthResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::AuthResponse>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::store::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::RegisterResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::RegisterResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::store::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::ProductResponse>* AsyncGetProductRaw(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::ProductResponse>* PrepareAsyncGetProductRaw(::grpc::ClientContext* context, const ::store::ProductRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::AddToCartResponse>* AsyncAddToCartRaw(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::AddToCartResponse>* PrepareAsyncAddToCartRaw(::grpc::ClientContext* context, const ::store::AddToCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::CheckoutResponse>* AsyncCheckoutRaw(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::store::CheckoutResponse>* PrepareAsyncCheckoutRaw(::grpc::ClientContext* context, const ::store::CheckoutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Authenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_AddToCart_;
    const ::grpc::internal::RpcMethod rpcmethod_Checkout_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::store::AuthRequest* request, ::store::AuthResponse* response);
    virtual ::grpc::Status RegisterUser(::grpc::ServerContext* context, const ::store::RegisterRequest* request, ::store::RegisterResponse* response);
    virtual ::grpc::Status GetProduct(::grpc::ServerContext* context, const ::store::ProductRequest* request, ::store::ProductResponse* response);
    virtual ::grpc::Status AddToCart(::grpc::ServerContext* context, const ::store::AddToCartRequest* request, ::store::AddToCartResponse* response);
    virtual ::grpc::Status Checkout(::grpc::ServerContext* context, const ::store::CheckoutRequest* request, ::store::CheckoutResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::store::AuthRequest* /*request*/, ::store::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::store::AuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::store::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::store::RegisterRequest* /*request*/, ::store::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::store::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::store::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProduct() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::store::ProductRequest* /*request*/, ::store::ProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProduct(::grpc::ServerContext* context, ::store::ProductRequest* request, ::grpc::ServerAsyncResponseWriter< ::store::ProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddToCart() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddToCart(::grpc::ServerContext* /*context*/, const ::store::AddToCartRequest* /*request*/, ::store::AddToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddToCart(::grpc::ServerContext* context, ::store::AddToCartRequest* request, ::grpc::ServerAsyncResponseWriter< ::store::AddToCartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Checkout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Checkout() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Checkout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checkout(::grpc::ServerContext* /*context*/, const ::store::CheckoutRequest* /*request*/, ::store::CheckoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckout(::grpc::ServerContext* context, ::store::CheckoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::store::CheckoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Authenticate<WithAsyncMethod_RegisterUser<WithAsyncMethod_GetProduct<WithAsyncMethod_AddToCart<WithAsyncMethod_Checkout<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::store::AuthRequest, ::store::AuthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::store::AuthRequest* request, ::store::AuthResponse* response) { return this->Authenticate(context, request, response); }));}
    void SetMessageAllocatorFor_Authenticate(
        ::grpc::MessageAllocator< ::store::AuthRequest, ::store::AuthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::store::AuthRequest, ::store::AuthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::store::AuthRequest* /*request*/, ::store::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::store::AuthRequest* /*request*/, ::store::AuthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::store::RegisterRequest, ::store::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::store::RegisterRequest* request, ::store::RegisterResponse* response) { return this->RegisterUser(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterUser(
        ::grpc::MessageAllocator< ::store::RegisterRequest, ::store::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::store::RegisterRequest, ::store::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::store::RegisterRequest* /*request*/, ::store::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::store::RegisterRequest* /*request*/, ::store::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProduct() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::store::ProductRequest, ::store::ProductResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::store::ProductRequest* request, ::store::ProductResponse* response) { return this->GetProduct(context, request, response); }));}
    void SetMessageAllocatorFor_GetProduct(
        ::grpc::MessageAllocator< ::store::ProductRequest, ::store::ProductResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::store::ProductRequest, ::store::ProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::store::ProductRequest* /*request*/, ::store::ProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::store::ProductRequest* /*request*/, ::store::ProductResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddToCart() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::store::AddToCartRequest, ::store::AddToCartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::store::AddToCartRequest* request, ::store::AddToCartResponse* response) { return this->AddToCart(context, request, response); }));}
    void SetMessageAllocatorFor_AddToCart(
        ::grpc::MessageAllocator< ::store::AddToCartRequest, ::store::AddToCartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::store::AddToCartRequest, ::store::AddToCartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddToCart(::grpc::ServerContext* /*context*/, const ::store::AddToCartRequest* /*request*/, ::store::AddToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddToCart(
      ::grpc::CallbackServerContext* /*context*/, const ::store::AddToCartRequest* /*request*/, ::store::AddToCartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Checkout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Checkout() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::store::CheckoutRequest, ::store::CheckoutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::store::CheckoutRequest* request, ::store::CheckoutResponse* response) { return this->Checkout(context, request, response); }));}
    void SetMessageAllocatorFor_Checkout(
        ::grpc::MessageAllocator< ::store::CheckoutRequest, ::store::CheckoutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::store::CheckoutRequest, ::store::CheckoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Checkout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checkout(::grpc::ServerContext* /*context*/, const ::store::CheckoutRequest* /*request*/, ::store::CheckoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Checkout(
      ::grpc::CallbackServerContext* /*context*/, const ::store::CheckoutRequest* /*request*/, ::store::CheckoutResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Authenticate<WithCallbackMethod_RegisterUser<WithCallbackMethod_GetProduct<WithCallbackMethod_AddToCart<WithCallbackMethod_Checkout<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::store::AuthRequest* /*request*/, ::store::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::store::RegisterRequest* /*request*/, ::store::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProduct() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::store::ProductRequest* /*request*/, ::store::ProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddToCart() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddToCart(::grpc::ServerContext* /*context*/, const ::store::AddToCartRequest* /*request*/, ::store::AddToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Checkout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Checkout() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Checkout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checkout(::grpc::ServerContext* /*context*/, const ::store::CheckoutRequest* /*request*/, ::store::CheckoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authenticate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::store::AuthRequest* /*request*/, ::store::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::store::RegisterRequest* /*request*/, ::store::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProduct() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::store::ProductRequest* /*request*/, ::store::ProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddToCart() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddToCart(::grpc::ServerContext* /*context*/, const ::store::AddToCartRequest* /*request*/, ::store::AddToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddToCart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Checkout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Checkout() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Checkout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checkout(::grpc::ServerContext* /*context*/, const ::store::CheckoutRequest* /*request*/, ::store::CheckoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Authenticate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::store::AuthRequest* /*request*/, ::store::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::store::RegisterRequest* /*request*/, ::store::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProduct() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::store::ProductRequest* /*request*/, ::store::ProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddToCart() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddToCart(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddToCart(::grpc::ServerContext* /*context*/, const ::store::AddToCartRequest* /*request*/, ::store::AddToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddToCart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Checkout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Checkout() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Checkout(context, request, response); }));
    }
    ~WithRawCallbackMethod_Checkout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checkout(::grpc::ServerContext* /*context*/, const ::store::CheckoutRequest* /*request*/, ::store::CheckoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Checkout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Authenticate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::store::AuthRequest, ::store::AuthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::store::AuthRequest, ::store::AuthResponse>* streamer) {
                       return this->StreamedAuthenticate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::store::AuthRequest* /*request*/, ::store::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::store::AuthRequest,::store::AuthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::store::RegisterRequest, ::store::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::store::RegisterRequest, ::store::RegisterResponse>* streamer) {
                       return this->StreamedRegisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::store::RegisterRequest* /*request*/, ::store::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::store::RegisterRequest,::store::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProduct() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::store::ProductRequest, ::store::ProductResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::store::ProductRequest, ::store::ProductResponse>* streamer) {
                       return this->StreamedGetProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProduct(::grpc::ServerContext* /*context*/, const ::store::ProductRequest* /*request*/, ::store::ProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::store::ProductRequest,::store::ProductResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddToCart() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::store::AddToCartRequest, ::store::AddToCartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::store::AddToCartRequest, ::store::AddToCartResponse>* streamer) {
                       return this->StreamedAddToCart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddToCart(::grpc::ServerContext* /*context*/, const ::store::AddToCartRequest* /*request*/, ::store::AddToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddToCart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::store::AddToCartRequest,::store::AddToCartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Checkout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Checkout() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::store::CheckoutRequest, ::store::CheckoutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::store::CheckoutRequest, ::store::CheckoutResponse>* streamer) {
                       return this->StreamedCheckout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Checkout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Checkout(::grpc::ServerContext* /*context*/, const ::store::CheckoutRequest* /*request*/, ::store::CheckoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::store::CheckoutRequest,::store::CheckoutResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_GetProduct<WithStreamedUnaryMethod_AddToCart<WithStreamedUnaryMethod_Checkout<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_GetProduct<WithStreamedUnaryMethod_AddToCart<WithStreamedUnaryMethod_Checkout<Service > > > > > StreamedService;
};

}  // namespace store


#endif  // GRPC_generated_2fstore_2eproto__INCLUDED
